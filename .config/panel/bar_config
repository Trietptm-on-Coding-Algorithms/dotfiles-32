#!/bin/bash

# Parse command line args
if [ "$4" == "" ]; then
    echo "Invalid number of arguments."
    echo -e "\nCommand Syntax:"
    echo "command <display> <display_count> <height> <gaps>"
    echo -e "\nExample:"
    echo "command DP-1 2 30 15"
    exit
fi

display=$1
BARW=0
BARH=$3
RESX=0
POSX=0
GAPS=$4
DISPLAY_COUNT=$2

# Automatically get screen data from xrandr
SCREENDATA=$(xrandr | grep $display | sed 's/[^+]* \([^+]*[^ ]*\).*/\1/')
RESX=$(echo $SCREENDATA | sed 's/\([^x]*\).*/\1/')
POSX=$(($(echo $SCREENDATA | sed 's/[^+]*+\([^+]*\)+.*/\1/') + $GAPS))
BARW=$(($RESX - $GAPS * 2))

# Color Theme File
CTF="$HOME/.Xresources"

# Colors
BACKGROUND=$(cat ${CTF} | grep -ixe '*color8:.*' | tail -c 8)
BACKGROUND_SECONDARY=$(cat ${CTF} | grep -ixe '*color0:.*' | tail -c 8)
FOREGROUND=$(cat ${CTF} | grep -ixe '*color7:.*' | tail -c 8)
FOREGROUND_SECONDARY=$(cat ${CTF} | grep -ixe '*color15:.*' | tail -c 8)
HIGHLIGHT=$(cat ${CTF} | grep -ixe '*color1:.*' | tail -c 8)

# Shutdown popup
POW="/usr/bin/python $HOME/Scripts/shutdown_menu.py $display &"
VOL="/usr/bin/python $HOME/Scripts/volume_slider.py $display &"
NOT="/usr/bin/python $HOME/Scripts/notification_popup.py $display &"

# Some bar templates
HOMEICON=$(echo 'ï€•'$'\n''ïƒ‰'$'\n''ï…º'$'\n''ï…¼' | sort -R | head -n 1)
POWERBUTTON="%{B$BACKGROUND}%{F$FOREGROUND}%{A:$POW:}  ${HOMEICON}  %{A}%{B$BACKGROUND}%{F$FOREGROUND}"
PLACEHOLDER="%{B$BACKGROUND_SECONDARY} %{B$BACKGROUND}"

ws() {
    WORKSPACE_ICONS=("  ï‚¬  " "  ï„   " "  ï„¡  " "  ï‡‘  " "  ï‡‘  ")
    ACTIVE=$(i3-msg -t get_workspaces | sed 's/"num":\([^,]*\)[^{]*"visible":\([^,]*\)[^}]*},"output":"\([^"]*\)/\n\1*\2*\3\n/g'| grep "true\*"$display"" | sed 's/\([0-9]*\).*/\1/')
    ALL=$(i3-msg -t get_workspaces | sed 's/"num":\([^,]*\)[^{]*"visible":\([^,]*\)[^}]*},"output":"\([^"]*\)/\n\1*\2*\3\n/g' | grep "\*"$display"" | sed 's/\([^\*]*\).*/\1/' | sort -g)
    OUTPUT=""
    for i in $ALL; do
        ICON="${WORKSPACE_ICONS[$((($i - 1) / $DISPLAY_COUNT))]}"
	if [[ "$i" -eq "$ACTIVE" ]]; then
	    OUTPUT="$OUTPUT%{B$HIGHLIGHT}%{F$BACKGROUND_SECONDARY}$ICON$PLACEHOLDER"
	else
	    OUTPUT="$OUTPUT%{B$BACKGROUND}%{F$FOREGROUND}$ICON$PLACEHOLDER"
	fi
    done
    OUTPUT="$OUTPUT%{B$BACKGROUND}%{F$FOREGROUND}"
    echo "$OUTPUT"
}

get_date() {
    DATE=$(date '+%A, %d. %B %H:%M')
    OUTPUT="  ðŸ•˜ $DATE  "
    echo "$OUTPUT"
}

get_not() {
    NEW_NOT=$(python2 $HOME/Scripts/leechnot.py show | wc -l) 
    if [[ "$NEW_NOT" -eq 0 ]]; then
        echo ""
    else
	echo "%{B$HIGHLIGHT}%{F$BACKGROUND}%{A:$NOT:}  ï€ƒ  %{A}%{B$BACKGROUND}%{F$FOREGROUND}"
    fi
}

get_vol() {
    CURRENT=$(amixer -D pulse get Master | grep -o "\[.*%\]" | grep -o "[0-9]*" | head -n1)
    OUTPUT="%{B$BACKGROUND}%{F$FOREGROUND}%{A:$VOL:}  ï€¨ ${CURRENT}  %{A}%{B$BACKGROUND}%{F$FOREGROUND}"
    echo "$OUTPUT"
}

while :; do
    # Hide bar if fullscreen, show if not
    ACTIVE_WORKSPACE=$(i3-msg -t get_workspaces | display="$display" perl -pe 's|.*num":([0-9]*).*?"visible":true.*?output":"$ENV{display}.*|\1|')
    IS_FULLSCREEN=$(i3-msg -t get_tree | ACTIVE_WORKSPACE="$ACTIVE_WORKSPACE" perl -pe 's|.*("num":$ENV{ACTIVE_WORKSPACE}.*?((?!num":).)*).*|\1|' | grep -o '"fullscreen_mode":1' | wc -l)
    if [[ "$IS_FULLSCREEN" -eq 2 ]]; then
        xdo hide -a "$display-LMNBAR"
    else
        xdo show -a "$display-LMNBAR"
    fi

    # Echo bar layout
    echo "${POWERBUTTON}$PLACEHOLDER$(ws)%{c}$(get_date)%{r}$(get_not)$(get_vol)"
    sleep .1
done | lemonbar -d -p -n "$display-LMNBAR" -g ${BARW}x${BARH}+${POSX}+${GAPS} -F "$FOREGROUND" -B "$BACKGROUND" -f "Source Code Pro Semibold-12" -f "FontAwesome-15" | \
    while :; do read line; eval $line; done &

